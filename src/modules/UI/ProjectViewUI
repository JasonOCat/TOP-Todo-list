import Task, { isValidTaskTitle } from '../Task';
import ProjectList from '../ProjectList';
import { addTaskToProject } from '../Project';

const ProjectViewUI = (() => {
    const projectTitle = document.getElementById('project-title');
    const projectViewDiv = document.querySelector(".project-view");

    // Add task buttons elements
    const btnAddTask = document.getElementById('btn-add-task');

    // Form elements
    const formAddTask = document.getElementById('form-add-task-container');
    const btnFormAddTask = document.getElementById('btn-form-add-task');
    const btnFormCancelAddTask = document.getElementById('btn-form-cancel-task');
    const inputTaskTitle = document.getElementById('input-task-title');
    const inputTaskDescription = document.getElementById('input-task-description');


    const initAddTaskButton = () => {
        // Button add Task
        btnAddTask.addEventListener('click', openAddTaskForm);

        // Form add Task
        inputTaskTitle.addEventListener('keyup', (e) => handleInputAddTaskTitle(e));
        btnFormAddTask.addEventListener('click', addTask);
        btnFormCancelAddTask.addEventListener('click', cancelAddTask);
    };

    const openAddTaskForm = () => {
        displayAddTaskForm();
        hideAddTaskButton();
    };

    const addTask = () => {
        // add the Task to the ProjectList and save the new ProjectList with the new task
        let newTask = Task(inputTaskTitle.value, inputTaskTitle.description);
        let currentProject = ProjectList.getProjectById(formAddTask.getAttribute('data-project'));
        addTaskToProject(newTask, currentProject);

        // display the new task
        displayTaskAndItsButtons(newTask);

        hideAddTaskForm();
        displayAddTaskButton();
        clearInputTaskTitle();
        clearInputTaskDescription();
    };

    const cancelAddTask = () => {
        hideAddTaskForm();
        displayAddTaskButton();
        clearInputTaskTitle();
        clearInputTaskDescription();
        inputTaskDescription.setAttribute('style','');
    };

    const clearInputTaskTitle = () => {
        inputTaskTitle.value= '';
    }

    const clearInputTaskDescription = () => {
        inputTaskDescription.value = '';
        inputTaskDescription.style = '';
    }

    const handleInputAddTaskTitle = (e) => {

        if (isValidTaskTitle(e.target.value) && e.key === 'Enter') {
            addTask();
        } else if (isValidTaskTitle(e.target.value)) {
            btnFormAddTask.removeAttribute('disabled');
        } else {
            btnFormAddTask.setAttribute('disabled','');
        }
    };


    /* START HELPERS to display or not button add task, or the form to add a task */

    const displayAddTaskForm = () => {
        formAddTask.setAttribute('active','');
    };

    const hideAddTaskButton = () => {
        btnAddTask.removeAttribute('active');
    };

    const displayAddTaskButton = () => {
        btnAddTask.setAttribute('active','');
    };

    const hideAddTaskForm = () => {
        formAddTask.removeAttribute('active');
    };

    /* END HELPERS to display or not button add task, or the form to add a task */


    const setCurrentProjectId = (project) => {
        formAddTask.setAttribute('data-project', project.id);
    }


    const openProject = (project) => {
        projectTitle.innerHTML = 
        `
        <h2>${project.name}</h2>
        `;
        setCurrentProjectId(project);
        ProjectViewUI.displayProjectTasksAndTheirButtons();
    };

    const cleanProjectView = () => {
        projectViewDiv.innerHTML = '';
    }


    const displayProjectTasksAndTheirButtons = () => {
        cleanProjectView();
        let currentProject = ProjectList.getProjectById(formAddTask.getAttribute('data-project'));
        currentProject.tasks.forEach(task => displayTaskAndItsButtons(task));
    }

    const displayTaskAndItsButtons = (task) => {
        // Set the task button attributes and class
        const newTaskButtonDiv = document.createElement('div');
        const newTaskButton = document.createElement('button');
        newTaskButton.classList.add('btn-task');
        newTaskButton.setAttribute('data-task', task.id);

        // display the task button to the list of tasks
        newTaskButton.innerHTML=`
            <div class="task-button-container">
                <input type="checkbox">
                <span>${task.title}</span>
            </div>
            
        `;

        // add event listener when clicking on the project
        newTaskButton.addEventListener('click', (e) => {
            handleClickTaskButton(e, task);
        });

        newTaskButtonDiv.appendChild(newTaskButton);

        let divUpdateTaskForm = document.createElement('div');
        divUpdateTaskForm.classList.add("form-add-task-container")
        divUpdateTaskForm.innerHTML = `
            <form id="form-add-task" data-task="">
                <input id="input-task-title" type="text" placeholder="Name of the task">
                <textarea id="input-task-description" rows="3" placeholder="Description"></textarea>
            </form>
            <div id="add-task-buttons">
                <button id="btn-form-cancel-task"> Cancel</button>
                <button id="btn-form-add-task" disabled> Save</button>
            </div>
        `
        newTaskButton.insertAdjacentElement('afterend', divUpdateTaskForm)

        projectViewDiv.appendChild(newTaskButtonDiv);

    }

    const handleClickTaskButton = (e, task) => {
        console.log('click on task ' + task.title);

        // hide the Task

        // display the form to update Task
    }

    return {
        openProject,
        cleanProjectView,
        initAddTaskButton,
        displayTaskAndItsButtons,
        displayProjectTasksAndTheirButtons,
        
    };

})();

export default ProjectViewUI;