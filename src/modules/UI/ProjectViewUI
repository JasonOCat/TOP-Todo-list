import Task, { isValidTaskTitle } from '../Task';
import ProjectList from '../ProjectList';
import { addTaskToProject } from '../Project';
import Storage from '../Storage';

const ProjectViewUI = (() => {
    const projectTitle = document.getElementById('project-title');
    const projectViewDiv = document.querySelector(".project-view");

    // Add task buttons elements
    const btnAddTask = document.getElementById('btn-add-task');

    // Form elements
    const formAddTask = document.getElementById('form-add-task-container');
    const btnFormAddTask = document.getElementById('btn-form-add-task');
    const btnFormCancelAddTask = document.getElementById('btn-form-cancel-task');
    const inputTaskTitle = document.getElementById('input-task-title');
    const inputTaskDescription = document.getElementById('input-task-description');


    const initAddTaskButton = () => {
        // Button add Task
        btnAddTask.addEventListener('click', openAddTaskForm);

        // Form add Task
        inputTaskTitle.addEventListener('keyup', (e) => handleInputAddTaskTitle(e));
        btnFormAddTask.addEventListener('click', addTask);
        btnFormCancelAddTask.addEventListener('click', cancelAddTask);
    };

    const openAddTaskForm = () => {
        displayAddTaskForm();
        hideAddTaskButton();
    };

    const addTask = () => {
        // add the Task to the ProjectList and save the new ProjectList with the new task
        let newTask = Task(inputTaskTitle.value, inputTaskDescription.value);
        let currentProject = ProjectList.getProjectById(formAddTask.getAttribute('data-project'));
        addTaskToProject(newTask, currentProject);

        // display the new task
        displayTaskAndItsButtons(newTask);

        hideAddTaskForm();
        displayAddTaskButton();
        clearInputTaskTitle();
        clearInputTaskDescription();
    };

    const cancelAddTask = () => {
        hideAddTaskForm();
        displayAddTaskButton();
        clearInputTaskTitle();
        clearInputTaskDescription();
        inputTaskDescription.setAttribute('style','');
    };

    const cancelUpdateTask = (e, divUpdateTaskForm) => {

        divUpdateTaskForm.remove('active','');
        // displayAddTaskButton();
        // clearInputTaskTitle();
        // clearInputTaskDescription();
        // inputTaskDescription.setAttribute('style','');
    };

    const clearInputTaskTitle = () => {
        inputTaskTitle.value= '';
        btnFormAddTask.setAttribute('disabled','');
    }

    const clearInputTaskDescription = () => {
        inputTaskDescription.value = '';
        inputTaskDescription.style = '';
    }

    const handleInputAddTaskTitle = (e) => {

        if (isValidTaskTitle(e.target.value) && e.key === 'Enter') {
            addTask();
        } else if (isValidTaskTitle(e.target.value)) {
            btnFormAddTask.removeAttribute('disabled');
        } else {
            btnFormAddTask.setAttribute('disabled','');
        }
    };


    /* START HELPERS to display or not button add task, or the form to add a task */

    const displayAddTaskForm = () => {
        formAddTask.setAttribute('active','');
    };

    const hideAddTaskForm = () => {
        formAddTask.removeAttribute('active');
    };


    const hideAddTaskButton = () => {
        btnAddTask.removeAttribute('active');
    };

    const displayAddTaskButton = () => {
        btnAddTask.setAttribute('active','');
    };

    const hideProjectTitle = () => {
        projectTitle.innerHTML = '';
    }


    /* END HELPERS to display or not button add task, or the form to add a task */


    const setCurrentProjectId = (project) => {
        formAddTask.setAttribute('data-project', project.id);
    }


    const openProject = (project) => {
        projectTitle.innerHTML = 
        `
        <h2>${project.name}</h2>
        `;
        setCurrentProjectId(project);
        ProjectViewUI.displayProjectTasksAndTheirButtons();
    };

    const cleanProjectView = () => {
        projectViewDiv.innerHTML = '';
    }


    const displayProjectTasksAndTheirButtons = () => {
        cleanProjectView();
        let currentProject = ProjectList.getProjectById(formAddTask.getAttribute('data-project'));
        currentProject.tasks.forEach(task => displayTaskAndItsButtons(task));
    }

    const displayTaskAndItsButtons = (task) => {
        // Set the task button attributes and class
        const newTaskButtonDiv = document.createElement('div');
        newTaskButtonDiv.classList.add('task-div-container')
        newTaskButtonDiv.setAttribute('active','');
        const newTaskButton = document.createElement('button');
        newTaskButton.classList.add('btn-task');
        newTaskButton.setAttribute('active', '');
        newTaskButton.setAttribute('data-task', task.id);

        // display the task button to the list of tasks
        newTaskButton.innerHTML=`
            <div class="task-button-container">


                <div class="task-button-sub-container">
                    <input type="checkbox">
                    <span class="task-title">${task.title}</span>
                </div>

                <span class="task-description">
                    ${task.description ? task.description : ""}
                </span>
            </div>
            
        `;


        newTaskButtonDiv.appendChild(newTaskButton);

        let divUpdateTaskForm = document.createElement('div');
        divUpdateTaskForm.classList.add("form-update-task-container")
        divUpdateTaskForm.innerHTML = `
            <form class="form-update-task">
                <input class="input-update-task-title" type="text" placeholder="Name of the task">
                <textarea class="input-update-task-description" rows="3" placeholder="Description"></textarea>
            </form>
            <div class="update-task-buttons">
                <button class="btn-form-cancel-update-task">Cancel</button>
                <button class="btn-form-update-task">Save</button>
            </div>
        `

        // when clicking on the task
        newTaskButton.addEventListener('click', () => {
            // hide the Task button
            newTaskButton.removeAttribute('active');
            // display the form to update the Task
            divUpdateTaskForm.setAttribute('active','');

            // in the update form, fill the title and description of the task
            const inputUpdateTitle = divUpdateTaskForm.querySelector('.input-update-task-title');
            const inputUpdateDescription = divUpdateTaskForm.querySelector('.input-update-task-description');

            inputUpdateTitle.value = task.title;
            inputUpdateDescription.value = task.description;
            inputUpdateTitle.focus();
        });


        // add and cancel update task buttons
        initCancelAndSaveTaskButtons(divUpdateTaskForm, newTaskButton, task);

        newTaskButton.insertAdjacentElement('afterend', divUpdateTaskForm);

        projectViewDiv.appendChild(newTaskButtonDiv);

    }

    const initCancelAndSaveTaskButtons = (divUpdateTaskForm, taskButton, task) => {
        const inputUpdateTitle = divUpdateTaskForm.querySelector('.input-update-task-title');
        const inputUpdateDescription = divUpdateTaskForm.querySelector('.input-update-task-description');
        const cancelUpdateButton = divUpdateTaskForm.querySelector('.btn-form-cancel-update-task');
        const saveUpdateButton = divUpdateTaskForm.querySelector('.btn-form-update-task');
        const spanTaskTitle = taskButton.querySelector('span.task-title');
        const spanTaskDescription = taskButton.querySelector('span.task-description');
        
        // Cancel update
        cancelUpdateButton.addEventListener('click', () => {
            divUpdateTaskForm.removeAttribute('active','');
            taskButton.setAttribute('active','');
            saveUpdateButton.removeAttribute('disabled');
        })

        // Listener when updating title of the 

        inputUpdateTitle.addEventListener('keyup', (e) => {
            if (isValidTaskTitle(e.target.value)) {
                saveUpdateButton.removeAttribute('disabled');
            } else {
                saveUpdateButton.setAttribute('disabled','');
            }
        })

        // Save update
        saveUpdateButton.addEventListener('click', () => {
            task.title = inputUpdateTitle.value;
            task.description = inputUpdateDescription.value;
            divUpdateTaskForm.removeAttribute('active');
            taskButton.setAttribute('active', '');
            spanTaskTitle.textContent = task.title;
            spanTaskDescription.textContent = task.description;
            Storage.saveProjectList();
        })

    }


    return {
        openProject,
        cleanProjectView,
        initAddTaskButton,
        displayTaskAndItsButtons,
        displayProjectTasksAndTheirButtons,
        displayAddTaskForm,
        hideAddTaskForm,
        displayAddTaskButton,
        clearInputTaskTitle,
        clearInputTaskDescription,
        hideAddTaskButton,
        hideProjectTitle,
        
    };

})();

export default ProjectViewUI;